import pandas as pd
import os
from datetime import datetime

def create_section_header(title, emoji="üìö"):
    return f"\n## {emoji} {title}\n\n"

def create_subsection_header(title, emoji="üîπ"):
    return f"\n### {emoji} {title}\n\n"

def create_markdown_table(df, group_by=None):
    if group_by:
        tables = []
        for group_name, group_df in df.groupby(group_by):
            tables.append(f"#### {group_name}\n")
            group_df = group_df.drop(columns=[group_by])
            # Create header
            tables.append("| " + " | ".join(group_df.columns) + " |")
            tables.append("| " + " | ".join(["---" for _ in group_df.columns]) + " |")
            # Add rows
            for _, row in group_df.iterrows():
                row_values = [str(val).replace("\n", "<br>") for val in row]
                tables.append("| " + " | ".join(row_values) + " |")
            tables.append("\n")
        return "\n".join(tables)
    else:
        # Create header
        markdown = "| " + " | ".join(df.columns) + " |\n"
        markdown += "| " + " | ".join(["---" for _ in df.columns]) + " |\n"
        # Add rows
        for _, row in df.iterrows():
            row_values = [str(val).replace("\n", "<br>") for val in row]
            markdown += "| " + " | ".join(row_values) + " |\n"
        return markdown

def update_readme():
    # Read the CSV files
    fundamentals_df = pd.read_csv('data/fundamentals.csv')
    notebooks_df = pd.read_csv('data/notebooks.csv')
    courses_df = pd.read_csv('data/courses.csv')
    tools_df = pd.read_csv('data/tools.csv')
    resources_df = pd.read_csv('data/resources.csv')
    deepseek_df = pd.read_csv('data/deepseek.csv')

    # Create README content
    content = []
    
    # Title and introduction
    content.extend([
        "# AI/LLM Learning Resources 2025 üöÄ",
        "",
        f"*‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%d %B %Y')}*",
        "",
        "*‡∏Ñ‡∏•‡∏±‡∏á‡∏£‡∏ß‡∏°‡πÅ‡∏´‡∏•‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏î‡πâ‡∏≤‡∏ô AI ‡πÅ‡∏•‡∏∞ Large Language Models (LLMs) " 
        "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á*",
        "",
        "---"
    ])

    # Learning Path
    content.extend([
        create_section_header("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ", "üéØ"),
        "1. **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô** - ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞ Python",
        "2. **‡∏ù‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥** - ‡∏ú‡πà‡∏≤‡∏ô Notebooks ‡πÅ‡∏•‡∏∞ Projects",
        "3. **‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á** - ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ",
        "4. **‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î** - ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
        ""
    ])

    # Previous sections remain the same...

    # DeepSeek AI Repositories
    content.extend([
        create_section_header("DeepSeek AI Repositories", "üöÄ"),
        "‡∏Ñ‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å DeepSeek AI ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
        "",
        create_markdown_table(deepseek_df, group_by='type')
    ])

    # JSON Data
    content.extend([
        create_section_header("JSON Data", "üìä"),
        "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:",
        "",
        "- [all_data.json](data/all_data.json)",
        ""
    ])


    # How to Proceed section
    content.extend([
        create_section_header("How to Proceed", "üöÄ"),
        "1. **‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏±‡∏á**: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô DeepSeek-Coder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î, DeepSeek-V3 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LLM)",
        "2. **‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î**: ‡πÉ‡∏ä‡πâ `git clone <URL>` ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ZIP ‡∏à‡∏≤‡∏Å GitHub",
        "3. **‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á**: ‡∏£‡∏±‡∏ô `pip install -r requirements.txt` ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô README",
        "4. **‡∏ó‡∏î‡∏•‡∏≠‡∏á**: ‡πÉ‡∏ä‡πâ Script ‡∏´‡∏£‡∏∑‡∏≠ API ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á, ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        "5. **Hardware**: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° GPU (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 16GB+ VRAM) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Cloud ‡πÄ‡∏ä‡πà‡∏ô Colab Pro",
        "",
        "---",
        "",
        "*Made with ‚ù§Ô∏è by the AI Learning Community*"
    ])

    # Write to README.md
    with open('README.md', 'w', encoding='utf-8') as f:
        f.write('\n'.join(content))

    print("README.md has been updated successfully.")

if __name__ == "__main__":
    update_readme()
